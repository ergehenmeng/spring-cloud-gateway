# =  进行普通字符精确匹配，完全匹配
# ^~ 进行普通字符匹配，当前表示前缀匹配
# ~\~* 表示执行一个正则匹配()


user root;
worker_processes auto;
error_log /usr/local/nginx/log/error.log;
pid /usr/local/nginx/nginx.pid;

events {
    worker_connections 1024;
}

# http全局配置
http {
    # 请求日志输出
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/local/nginx/log/access.log  main;
    # 开启 tcp_nopush 提高网络包传输效率
    sendfile            on;
    # 类似于Channel.write,积累到一定程度后进行flush
    tcp_nopush          on;
    # 类似于Channel.writeFlush,与tcp_nopush相反
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    #隐藏版本号
    server_tokens  off;
    default_type        application/octet-stream;
    # 开启gzip
    gzip on;
    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
    gzip_min_length 1k;
    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间
    gzip_comp_level 2;
    # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
    gzip_types font/ttf font/otf image/svg+xml text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/json image/jpeg image/gif image/png;
    gzip_vary on;
    # 禁用IE 6 gzip
    gzip_disable "MSIE [1-6]\.";

    root /;
    autoindex_exact_size on;
    upstream api-web {
        hash $request_uri;
        server localhost:8080;
        server localhost:8081;
    }

    # 其他模块依赖
    include E:\nginx\conf\ext\*.conf;
}


